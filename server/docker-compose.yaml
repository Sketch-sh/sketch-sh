version: '3.6'
services:
  postgres:
    image: postgres
    ports:
    - "5432:5432"
    environment:
    - "POSTGRES_PASSWORD:mysecretpassword"
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0-alpha12
    ports:
    - "8081:8080"
    depends_on:
    - postgres
    restart: always
    environment:
    - POSTGRES_PASSWORD=mysecretpassword
    - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:mysecretpassword@postgres:5432/postgres 
    - HASURA_GRAPHQL_ACCESS_KEY=${HASURA_ACCESS_KEY}
    - HASURA_GRAPHQL_AUTH_HOOK=http://auth/auth/webhook
    command: >
      /bin/sh -c "graphql-engine serve --enable-console;"
  auth:
    build:
      context: auth
      args:
        - NODE_ENV=development
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229
    ports:
      - "3001:80"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - ./auth:/opt/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # docker-compose exec node npm install --save bower
      - ./auth/package.json:/opt/package.json
      - ./auth/package-lock.json:/opt/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/app/node_modules
    environment:
      - NODE_ENV=development
      - JWT_TOKEN=${JWT_TOKEN}
      - HASURA_ENDPOINT=http://graphql-engine:8080/v1alpha1/graphql
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_CALLBACK_URL=${GITHUB_CALLBACK_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - FRONTEND_AUTH_CALLBACK=${FRONTEND_URL}/auth/callback
      - FRONTEND_AUTH_FAILURE=${FRONTEND_URL}/auth/failure

    depends_on:
      - graphql-engine
volumes:
  db_data:
  notused:
